# -*- coding: utf-8 -*-
"""Data Science - Python - Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgpKpwe5uAtbC302A0yeXeYyENRh0SvB
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
!pip install seaborn==0.9.0
import seaborn as sns
# %matplotlib inline
from matplotlib import pyplot as plt

"""#Alucar - Analisando as vendas"""

alucar = pd.read_csv('alucar.csv')
alucar.head()

print('Quantidade de linhas e colunas: ', alucar.shape) #imprimir quantidade de linhas e colunas da variavel criada

print('Quantidade de dados nulos: ', alucar.isna().sum().sum()) #imprimir quantidade nulos existente

alucar.dtypes

alucar['mes'] = pd.to_datetime(alucar['mes']) #Boa pratica converter onde tem data para datetime64

alucar.dtypes

sns.lineplot(x = 'mes', y = 'vendas', data = alucar) #plot gráfico das vendas por mês

#Style para o gráfico

sns.set_palette('Accent') #linha verde
sns.set_style('darkgrid') #fundo(grid) cinza
ax = sns.lineplot(x='mes', y='vendas', data=alucar) #Definindo a variavel para gráfico
ax.figure.set_size_inches(12,6) #aumenta o tamanho da exibição do gráfico
ax.set_title('Vendas Alucar de 2017 e 2018', loc='left', fontsize=18) #Definir title, posição e fonte
ax.set_xlabel('Tempo', fontsize=14) #Definir lable do x e fonte
ax.set_ylabel('Vendas (R$)', fontsize=14) #Definir lable do y e fonte
ax = ax #Remove o "(Text, 0.5, 'Vendas (R$)' no caso

alucar['aumento'] = alucar['vendas'].diff() #criar uma coluna 'aumento' com a variação de vendas entre os meses
alucar.head()

"""Decompondo os Gráficos de Vendas"""

#Style para o gráfico

sns.set_palette('Accent') #linha verde
sns.set_style('darkgrid') #fundo(grid) cinza
ax = sns.lineplot(x='mes', y='aumento', data=alucar) #Definindo a variavel para gráfico
ax.figure.set_size_inches(12,6) #aumenta o tamanho da exibição do gráfico
ax.set_title('Aumento das Vendas da  Alucar de 2017 e 2018', loc='left', fontsize=18) #Definir title, posição e fonte
ax.set_xlabel('Tempo', fontsize=14) #Definir lable do x e fonte
ax.set_ylabel('Aumento', fontsize=14) #Definir lable do y e fonte
ax = ax #Remove o "(Text, 0.5, 'Vendas (R$)' no caso

#Criando uma função de Plotar Grafico

def plotar(titulo, labelx, labely, x, y, dataset) :
  sns.set_palette('Accent') 
  sns.set_style('darkgrid') 
  ax = sns.lineplot(x=x, y=y, data=alucar) 
  ax.figure.set_size_inches(12,6) 
  ax.set_title(titulo, loc='left', fontsize=18) 
  ax.set_xlabel(labelx, fontsize=14) 
  ax.set_ylabel(labely, fontsize=14) 
  ax = ax

plotar('Aumentodas das vendas de Alucar de 2017 e 2018', 'Tempo', 'Aumento', 'mes', 'aumento', alucar)

alucar['aceleracao'] = alucar['aumento'].diff()
alucar.head()

plotar('Aceleração das vendas da Alucar de 2017 e 2018', 'Tempo', 'Aceleração', 'mes', 'aceleracao', alucar)

"""Juntando os gráficos em uma visualização"""

plt.figure(figsize=(16,12)) #tamanho da figura
ax = plt.subplot(3,1,1) #Definindo o gráfico a ser plotado, espaço de ocupação, localização
ax.set_title('Análise de vendas da Alucar de 2017 e 2018', fontsize=18, loc='left') 
sns.lineplot(x='mes', y='vendas', data = alucar)
plt.subplot(3,1,2)
sns.lineplot(x='mes', y='aumento', data = alucar)
plt.subplot(3,1,3)
sns.lineplot(x='mes', y='aceleracao', data = alucar)
ax = ax

"""Criando uma função para fazer a comparação"""

def plot_comparacao(x, y1, y2, y3, dataset, titulo ):
  plt.figure(figsize=(16,12)) 
  ax = plt.subplot(3,1,1)
  ax.set_title(titulo, fontsize=18, loc='left') 
  sns.lineplot(x='mes', y=y1, data = dataset)
  plt.subplot(3,1,2)
  sns.lineplot(x='mes', y=y2, data = dataset)
  plt.subplot(3,1,3)
  sns.lineplot(x='mes', y=y3, data = dataset)
  ax = ax

plot_comparacao('mes', 'vendas', 'aumento', 'aceleracao', alucar, 'Análise das vendas da Alucar de 2017 e 2018')

"""#Função de Autocorrelação

Ela é uma medida de correlação entre as observações de uma série temporal. Para entender melhor o funcionamento dela, comparamos os valores com suas próprias correlações, ou seja, consigo mesmas.

Nível de correlação max 1 e min -1
"""

from pandas.plotting import autocorrelation_plot #importando a biblioteca da autocorrelacao

"""Gráfico de Correlação de vendas"""

autocorrelation_plot(alucar['vendas'])

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação das Vendas', fontsize=18, x=0.26, y=0.95)
autocorrelation_plot(alucar['vendas'])
ax=ax

"""Grafico de Correlação de aumentos"""

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação de aumento das vendas', fontsize=18, x=0.26, y=0.95)
autocorrelation_plot(alucar['aumento'][1:]) #Necessidade de informação do ponto 1 do dataframe para ter valores
ax=ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação da aceleração', fontsize=18, x=0.26, y=0.95)
autocorrelation_plot(alucar['aceleracao'][2:]) #Necessidade de informação do ponto 2 do dataframe para ter valores
ax=ax

"""#Alucar -  Analisando assinantes da newsletter"""

assinantes = pd.read_csv('newsletter_alucar.csv') #colocando em variavel e carregando o arquivo csv para analise

print('Quantidade de linhas e colunas', assinantes.shape) #verificando quantidade de linhas e colunas
print('Quantidade de dados nulos', assinantes.isna().sum().sum()) #verificando quantiade de nulos

assinantes['mes'] = pd.to_datetime(assinantes['mes']) #Converteremos o tipo do mês para datetime

assinantes.dtypes

assinantes['aumento']= assinantes ['assinantes'].diff() #fazer o diff para descobrir o aumento e a aceleração do número de assinantes.
assinantes['aceleracao']= assinantes ['aumento'].diff()
assinantes.head()

plot_comparacao('mes', 'assinantes', 'aumento', 'aceleracao', assinantes, 'Análise de assinantes da newsletter')

"""#Chocolura - Análise"""

chocolura = pd. read_csv('chocolura.csv')

chocolura.head()

chocolura.dtypes

chocolura['mes'] = pd.to_datetime(chocolura['mes'])

print ('Quantidade de linhas:', chocolura.shape)
print ('Quantidade de dados nulos:', chocolura.isna().sum().sum())

chocolura['aumento']= chocolura ['vendas'].diff()
chocolura['aceleracao']= chocolura ['aumento'].diff()
chocolura.head()

plot_comparacao('mes', 'vendas', 'aumento', 'aceleracao', chocolura, 'Análise de vendas de Chocolura de 2017 a 2018')

"""#Chocolura - Vendas diárias (Outubro e Novembro)"""

vendas_por_dia = pd. read_csv('vendas_por_dia.csv')

vendas_por_dia.head()

print ('Quantidade de linhas:',vendas_por_dia.shape)
print ('Quantidade de dados nulos:', vendas_por_dia.isna().sum().sum())

vendas_por_dia.dtypes

vendas_por_dia['dia'] = pd.to_datetime(vendas_por_dia['dia'])

vendas_por_dia['aumento']= vendas_por_dia['vendas'].diff()
vendas_por_dia['aceleracao']= vendas_por_dia['aumento'].diff()
vendas_por_dia.head()

plot_comparacao('dia', 'vendas', 'aumento', 'aceleracao', vendas_por_dia, 'Análise de vendas de Outubro e Novembro - Chocolura')

vendas_por_dia['dia_da_semana'] = vendas_por_dia ['dia'].dt.day_name()

vendas_por_dia.head()

vendas_por_dia['dia_da_semana'].unique()

dias_traduzidos = {'Monday': 'Segunda', 'Tuesday' : 'Terça', 'Wednesday':'Quarta', 'Thursday':'Quinta', 'Friday':'Sexta', 'Saturday':'Sábado', 'Sunday':'Domingo'}

vendas_por_dia['dia_da_semana'] = vendas_por_dia['dia_da_semana'].map(dias_traduzidos)
vendas_por_dia.head(14)

"""Agrupando os dias"""

vendas_agrupadas = vendas_por_dia.groupby('dia_da_semana')['vendas', 'aumento', 'aceleracao'].mean().round()

vendas_agrupadas

"""#Normalização e Statsmodels"""

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação das vendas diárias', fontsize=18, x=0.3, y=0.95)
autocorrelation_plot(vendas_por_dia['vendas'])
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação do aumento das vendas diárias', fontsize=18, x=0.3, y=0.95)
autocorrelation_plot(vendas_por_dia['aumento'][1:])
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação da aceleração das vendas diárias', fontsize=18, x=0.3, y=0.95)
autocorrelation_plot(vendas_por_dia['aceleracao'][2:])
ax = ax

"""#Cafelura - Análise de Vendas"""

cafelura = pd.read_csv('cafelura.csv')
cafelura.head()

cafelura.dtypes

cafelura['mes'] = pd.to_datetime(cafelura['mes']) #mudando o tipo do mes de object para datetime

cafelura.dtypes

print('Quantidade de linhas e colunas:', cafelura.shape)
print('Quantidade de dados nulos:', cafelura.isna().sum().sum())

plotar('Vendas da Cafelura de 2017 e 2018', 'Tempo', 'Vendas', 'mes', 'vendas', cafelura)

quantidade_de_dias_de_fds = pd.read_csv('dias_final_de_semana.csv')

quantidade_de_dias_de_fds.head()

quantidade_de_dias_de_fds['quantidade_de_dias'].values

cafelura['vendas_normalizadas']= cafelura['vendas']/quantidade_de_dias_de_fds['quantidade_de_dias'].values
cafelura.head

plt.figure(figsize=(12,8))
ax=plt.subplot(2,1,1)
ax.set_title('Vendas Cafelura 2017 e 2018', fontsize=18)
sns.lineplot(x='mes', y='vendas', data=cafelura)
ax=plt.subplot(2,1,2)
ax.set_title('Vendas normalizadas Cafelura 2017 e 2018', fontsize=18)
sns.lineplot(x='mes', y='vendas_normalizadas', data=cafelura)
ax=ax

"""#Stastmodel"""

from statsmodels.tsa.seasonal import seasonal_decompose

resultado = seasonal_decompose(chocolura['vendas'],  freq=1)
ax = resultado.plot()

observacao = resultado.observed
tendencia = resultado.trend
sazonalidade = resultado.seasonal
ruido = resultado.resid

data = ({
       'observacao':observacao,
       'tendencia':tendencia, 
       'sazonalidade':sazonalidade,
       'ruido':ruido
})
resultado = pd.DataFrame(data)
resultado.head()

plot_comparacao(resultado.index, 'observacao', 'tendencia', 'sazonalidade', resultado, 'Exemplo de Statsmodels')

"""#Alucel = Análise"""

alucel = pd.read_csv('alucel.csv')
alucel.head()

alucel.dtypes

alucel['dia'] = pd.to_datetime(alucel['dia'])
alucel.dtypes

print('Quantidade de linhas e colunas:', alucel.shape)
print('Quantidade de dados nulos:', alucel.isna().sum().sum())

alucel ['aumento'] = alucel ['vendas'].diff()
alucel ['aceleracao'] = alucel ['aumento'].diff()

plot_comparacao('dia', 'vendas', 'aumento', 'aceleracao', alucel, 'Análise de vendas da Alucel de Outubro e Novembro de 2018')

"""Média móvel"""

alucel['media_movel'] = alucel['vendas'].rolling(7).mean()

plotar('Análise de vendas com média móvel de 7 dias', 'Tempo', 'Média Móvel', 'dia', 'media_movel', alucel)

alucel['media_movel_21'] = alucel['vendas'].rolling(21).mean()

plotar('Análise de vendas com média móvel de 21 dias', 'Tempo', 'Média Móvel', 'dia', 'media_movel_21', alucel)

plot_comparacao('dia', 'vendas', 'media_movel', 'media_movel_21', alucel, 'Comparando as médias móveis')